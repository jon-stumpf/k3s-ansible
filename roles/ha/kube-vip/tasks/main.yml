---

###############################################
# TODO: Implement a way to determine
#       'latest' version to download.

####################################################
# Recommended in https://kube-vip.io/docs/usage/k3s/
# See "Clean Environment".

- name: Reset local interface
  ansible.builtin.command: "{{ item }}"
  with_items:
    - ip addr flush dev lo
    - ip addr add 127.0.0.1/8 dev lo
  failed_when: false
  changed_when: false

#######################################################
# Deploy kube-vip manifests
# TODO: Figure out how to do this using kubernetes.core

- name: Start kube-vip
  run_once: true
  block:
    - name: Create manifest directory {{ path }}
      vars:
        path: "{{ data_dir }}/server/manifests/{{ k3s_cluster_method }}"
      ansible.builtin.file:
        path: "{{ path }}"
        state: directory
        owner: root
        group: root
        mode: "u=rwx,g=,o="
      register: manifest_dir

    # TODO: Should we download this instead?
    # (See https://kube-vip.io/docs/usage/k3s/#step-2-upload-kube-vip-rbac-manifest)
    - name: Copy RBAC manifest
      ansible.builtin.template:
        src: "kube-vip-rbac.yaml.j2"
        dest: "{{ manifest_dir.path }}/kube-vip-rbac.yaml"
        owner: root
        group: root
        mode: "u=rw,g=,o="

    # TODO: Should we generate this instead?
    # (See https://kube-vip.io/docs/installation/daemonset/#arp-example-for-daemonset).
    - name: Copy arp daemonset manifest
      ansible.builtin.template:
        src: "kube-vip-arp-ds.yaml.j2"
        dest: "{{ manifest_dir.path }}/kube-vip-arp-ds.yaml"
        owner: root
        group: root
        mode: "u=rw,g=,o="

    - name: Apply kube-vip manifests
      ansible.builtin.command: "{{ bin_dir }}/k3s kubectl apply -R -f {{ manifest_dir.path }}"
      when: manifest_dir is defined
      changed_when: false
