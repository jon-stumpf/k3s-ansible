---

# Determine architecture and suffix
- name: Check for amd64 architecture
  ansible.builtin.set_fact:
    k3s_arch: "amd64"
    k3s_suffix: ""
  when: ansible_facts.architecture == "x86_64" or
        ansible_facts.architecture == "amd64"

- name: Check for arm64 architecture
  ansible.builtin.set_fact:
    k3s_arch: "arm64"
    k3s_suffix: "-arm64"
  when:
    - ( ansible_facts.architecture is search("arm") and
        ansible_facts.userspace_bits == "64" ) or
      ansible_facts.architecture is search("aarch64")

- name: Check for arm architecture
  ansible.builtin.set_fact:
    k3s_arch: "arm"
    k3s_suffix: "-armhf"
  when:
    - ansible_facts.architecture is search("arm")
    - ansible_facts.userspace_bits == "32"

- name: Skip if architecture ({{ ansible_facts.architecture }}) is supported
  ansible.builtin.fail:
    msg: "This host does not have a supported architecture ({{ ansible_facts.architecture }})."
  when: k3s_arch is not defined

# Determine URLs to download
- name: Determine URLs to download
  block:
    - name: Determine version from channel
      when: k3s_version == 'undefined'
      run_once: true
      check_mode: false
      vars:
        version_url: "{{ k3s_channel_url }}/{{ k3s_channel }}"
      block:
        - name: Output channel information
          ansible.builtin.debug:
            var: version_url
          when: report_download_urls

        - name: Get version from channel
          ansible.builtin.uri:
            url: "{{ version_url }}"
            follow_redirects: safe
            force: true
            return_content: false
          register: channel_version_info

        - name: Set version from channel
          ansible.builtin.set_fact:
            k3s_version: "{{ channel_version_info.url.split('/')[-1] }}"

    - name: Output version
      ansible.builtin.debug:
        var: k3s_version
      when: report_download_urls
      run_once: true

    - name: Determine GitHub URLs
      ansible.builtin.set_fact:
        binary_url: "{{ github_url }}/download/{{ k3s_version }}/k3s{{ k3s_suffix }}"
        hash_url: "{{ github_url }}/download/{{ k3s_version }}/sha256sum-{{ k3s_arch }}.txt"
      when: k3s_commit == 'undefined'
      check_mode: false

    - name: Determine Storage URLs
      ansible.builtin.set_fact:
        binary_url: "{{ storage_url }}/k3s{{ k3s_suffix }}-{{ k3s_commit }}"
        hash_url: "{{ storage_url }}/k3s{{ k3s_suffix }}-{{ k3s_commit }}.sha256sum"
      when: k3s_commit != 'undefined'
      check_mode: false

    - name: Report Download URLs
      when: report_download_urls
      check_mode: false
      block:
        - name: Report URL for binary
          ansible.builtin.debug:
            var: binary_url

        - name: Report URL for hash
          ansible.builtin.debug:
            var: hash_url

# Download binaries
- name: Download k3s binary
  ansible.builtin.get_url:
    url: "{{ binary_url }}"
    checksum: "sha256:{{ hash_url }}"
    dest: "{{ bin_dir }}/k3s"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
