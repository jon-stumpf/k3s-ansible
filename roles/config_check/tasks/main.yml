---
- name: Check for correct single server configuration
  ansible.builtin.fail:
    msg: "Single server configuration requires exactly one (1) server."
  when:
    - not ha_enabled
    - groups['server'] | length != 1

# Purposefully do the HA check in two steps
- name: Check for correct HA configuration (minimum)
  ansible.builtin.fail:
    msg: "HA configuration requires an odd number of servers > 1 (i.e., minimum is three)."
  when:
    - ha_enabled
    - groups['server'] | length < 3

- name: Check for correct HA configuration (odd number)
  ansible.builtin.fail:
    msg: "HA configuration requires an ODD number of servers."
  when:
    - ha_enabled
    - groups['server'] | length is divisibleby 2

- name: Check for a proper HA cluster virtual IP
  ansible.builtin.fail:
    msg: "When HA is enabled, 'ha_cluster_vip' must have a valid IP address."
  when:
    - ha_enabled
    - (ha_cluster_vip is not defined) or not (ha_cluster_vip | ansible.netcommon.ipaddr)

- name: Check for a proper HA cluster method
  ansible.builtin.fail:
    msg: "'{{ k3s.cluster.method }}' is not a supported HA cluster method."
  when:
    - ha_enabled
    - k3s.cluster.method not in reference.cluster.methods

- name: Determine version to download
  when: k3s.version.commit == 'undefined'
  check_mode: false
  block:
    - name: Use version specified by k3s.version.tag
      when: k3s.version.tag != 'undefined'
      run_once: true
      ansible.builtin.set_fact:
        download_version: "{{ k3s.version.tag }}"

    - name: Determine version from channel
      when: k3s.version.tag == 'undefined'
      vars:
        version_url: "{{ k3s.channel.url }}/{{ k3s.channel.tag }}"
      block:
        - name: Output channel information
          ansible.builtin.debug:
            var: version_url
          when: report_version_info

        - name: Get version from channel
          ansible.builtin.uri:
            url: "{{ version_url }}"
            follow_redirects: safe
            force: true
            return_content: false
          register: channel_version_info

        - name: Set version from channel
          ansible.builtin.set_fact:
            download_version: "{{ channel_version_info.url.split('/')[-1] }}"

    - name: Output version
      ansible.builtin.debug:
        var: download_version
      when: report_version_info

- name: Check for minimum k3s version for HA configuration
  ansible.builtin.fail:
    msg: "HA configurations require k3s v1.19.5+k3s1 or greater.  {{ download_version }} was specified."
  vars:
    short_version: "{{ download_version | regex_search('v([^+]+)+', '\\1') | first }}"
  when:
    - k3s.version.commit == 'undefined'
    - ha_enabled
    - short_version is version('1.19.5', 'lt', True)

- name: No check when k3s.version.commit is specified
  ansible.builtin.debug:
    msg:
      - "There is no version check for HA support when a k3s.version.commit is specified."
      - "We assume you know what you are doing."
  when:
    - k3s.version.commit != 'undefined'
    - ha_enabled
    - report_version_info

