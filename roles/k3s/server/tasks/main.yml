---

################################################################################
# Setup servers in cluster using k3s-init
#

- name: Initialize k3s HA embedded database, etcd
  include_role:
    name: "ha/etcd"
  when: ha_enabled

################################################################################
# Setup k3s service
#

- name: Copy K3s service file
  register: k3s_service
  template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: "u=rw,g=r,o=r"

- name: Enable and check K3s service
  systemd:
    name: k3s
    daemon_reload: "{{ 'yes' if k3s_service.changed else 'no' }}"
    state:  "{{ 'restarted' if k3s_service.changed else 'started' }}"
    enabled: yes

################################################################################
# node-token tasks
#

- name: node-token tasks
  block:
    - name: Wait for node-token
      wait_for:
        path: "{{ data_dir }}/server/node-token"

    - name: Register node-token file access mode
      stat:
        path: "{{ data_dir }}/server/node-token"
      register: p

    - name: Make node-token world-readable
      file:
        path: "{{ data_dir }}/server/node-token"
        mode: 0644

    - name: Read node-token from the server
      slurp:
        path: "{{ data_dir }}/server/node-token"
      register: node_token

    - name: Store the server node-token
      set_fact:
        token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

    - name: Restore node-token file access
      file:
        path: "{{ data_dir }}/server/node-token"
        mode: "{{ p.stat.mode }}"
  when: not ansible_check_mode

- name: Set token
  set_fact:
    token: "ansible_check_mode token"
  when: ansible_check_mode

################################################################################
# Create ctl commands
#

- name: Copy k3s.sh for symlink'd commands
  register: k3s_symlink
  template:
    src: "k3s.sh.j2"
    dest: "{{ bin_dir }}/k3s.sh"
    owner: root
    group: root
    mode: "u=rwx,g=rx,o=rx"
  when:
    - data_dir is defined
    - data_dir != '/var/lib/rancher/k3s'
    - not ansible_check_mode

- name: Determine k3s bin target
  set_fact:
    k3s_bin_target: "{{ '{{ bin_dir }}/k3s.sh' if data_dir != '/var/lib/rancher/k3s' else '{{ bin_dir }}/k3s' | default('{{ bin_dir }}/k3s') }}"

- name: Create symlink'd commands (kubectl, crictl, ctr)
  file:
    src: "{{ k3s_bin_target }}"
    dest: "{{ bin_dir }}/{{ item }}"
    state: link
  with_items:
    - kubectl
    - crictl
    - ctr
  when: not ansible_check_mode

################################################################################
# Setup {{ ansible_user }}/.kube/config
#

- name: Setup {{ ansible_user }}/.kube/config
  block:
    - name: Create local kube directory, {{ path }}
      vars:
        path: "~{{ ansible_user }}/.kube"
      file:
        path: "{{ path }}"
        state: directory
        owner: "{{ ansible_user }}"
        mode: "u=rwx,g=rx,o="

    - name: Copy kubeconfig file, {{ src }}, to {{ dest }}
      vars:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "~{{ ansible_user }}/.kube/config"
      copy:
        src: "{{ src }}"
        dest: "{{ dest }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        mode: "u=rw,g=,o="

    - name: Replace https://localhost:{{ api_port }} by https://api_endpoint:{{ api_port }}
      command: >-
        {{ bin_dir }}/kubectl config set-cluster default
          --server=https://{{ api_endpoint }}:{{ api_port }}
          --kubeconfig ~{{ ansible_user }}/.kube/config
      changed_when: true

    # Fetch a copy of the cluster config for use in one's ~/.kube/config.
    # The playbook will update the IP address using the cluster-config role.
    - name: Fetch {{ src }} for use in one's ~/.kube/config
      vars:
        src: "/etc/rancher/k3s/k3s.yaml"
      fetch:
        src: "{{ src }}"
        dest: "{{ k3s_cluster_config }}.tmp"
        flat: yes
      run_once: true
      changed_when: false
  when: not ansible_check_mode

##########################
# Set up HA cluster method

- name: Setup HA cluster method, {{ k3s_cluster_method | default('n/a') }}
  vars:
    role: "ha/{{ k3s_cluster_method }}"
  include_role:
    name: "{{ role }}"
  when:
    - ha_enabled
    - k3s_cluster_method != 'external'
